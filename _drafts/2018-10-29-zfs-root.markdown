---
layout: post
title:  "ZFS Root on Kubuntu"
date:   2018-10-29 12:58:29
categories: ZFS
tags: 
 - zfs
 - zfsonlinux
 - zfs-root
 - filesystems
 - storage
 - ubuntu
 - kde-neon
 - desktop
---


ZFS is typically used for non-root volumes, but for many situations, it's fully 
supported for root volumes as well, allowing it to be used in many of the same 
ways that BSD uses it, running full system snapshots, full system restores and 
sends via `zfs send`, transparent compession, and the other many benefits of 
ZFS.

Note that this guide does NOT work on KDE Neon for the time being.

While it is possible to migrate an existing system to ZFS root, this guide assumes a 
clean install.

TODO : make this attribution cleaner.
Based on this guide: https://furneaux.ca/wiki/Ubuntu_ZFS_Root

## Start Live CD

Boot into a live environment with the installer image you wish to install.

Exit the installer, open a terminal.


## Find Disk Info
First, find the root device you wish to install on:

```
$ lsblk

NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
loop0    7:0    0   1.6G  1 loop /rofs
loop1    7:1    0  87.9M  1 loop /snap/core/5662
loop2    7:2    0   236M  1 loop /snap/kde-frameworks-5/27
sda      8:0    0 233.8G  0 disk 
sdb      8:16   1  28.7G  0 disk /cdrom
├─sdb1   8:17   1   1.7G  0 part 
└─sdb2   8:18   1   2.3M  0 part
```

In the example above, your device is `/dev/sda`.

Next, map your logical device name to it's physical name:

```
$ ls -lha /dev/disk/by-id

total 0
drwxr-xr-x 2 root root 160 Oct 29 16:56 .
drwxr-xr-x 7 root root 140 Oct 29 16:56 ..
lrwxrwxrwx 1 root root   9 Oct 29 16:56 ata-APPLE_SSD_SM0256G_S2Z5NY0J474795 -> ../../sda
lrwxrwxrwx 1 root root   9 Oct 29 16:41 usb-APPLE_SD_Card_Reader_000000000820-0:0 -> ../../sdc
lrwxrwxrwx 1 root root   9 Oct 29 16:41 usb-SanDisk_Ultra_4C530001110721100544-0:0 -> ../../sdb
lrwxrwxrwx 1 root root  10 Oct 29 16:41 usb-SanDisk_Ultra_4C530001110721100544-0:0-part1 -> ../../sdb1
lrwxrwxrwx 1 root root  10 Oct 29 16:41 usb-SanDisk_Ultra_4C530001110721100544-0:0-part2 -> ../../sdb2
lrwxrwxrwx 1 root root   9 Oct 29 16:56 wwn-0x5002538900000000 -> ../../sda
```

Find the device name on the left side which points to your device found above. For us, it is
`ata-WDC_WDS500G1B0A-00H9H0_170703801742`, which points to `/dev/sda/`.


## Setup Disk Bootloader

With the disk name found above, we will now setup the partitioning.

First, we'll create the GPT partition table of the device we found. Replace everything 
after `/by-id/` with your device name.


```
$ sudo sgdisk -o /dev/disk/by-id/ata-APPLE_SSD_SM0256G_S2Z5NY0J474795

Warning! Mismatched GPT and MBR partition! MBR partition 2, of type 0x83,
has no corresponding GPT partition! You may continue, but this condition
might cause data loss in the future!
The operation has completed successfully.
```

You may see an error about mismatched partitions and data loss - this is 
fine, as we are already deleting everything on the disk during install.

  TODO: Add step to delete everything off disk here, it'll get rid of error

  TODO: check to ensure that last paragraph is actually true, and issues
        won't persist after install.


Next, setup GRUB on the partition. As above, replace with your disk ID.

```
$ sudo sgdisk -a1 -n2:34:2047 -t2:EF02 /dev/disk/by-id/ata-APPLE_SSD_SM0256G_S2Z5NY0J474795
```


## Setup Partitions
Next, install gparted to create the partitions. This will require a network connection.

```
sudo apt update && sudo apt install gparted -y
```

Open gparted, find your disk, and create the needed partitions.


TODO: Look into the partition requirements to see if that's true
Linux requires a small (512mb, fat32) partition for UEFI, a large data partition 
(the rest of the disk) and a small boot partition. Optionally, a swap partition. 
We will omit swap for now.

Finally, we need a temporary install partition to run the installer against, which will 
then be deleted and the main data partition expanded. To do this, place a 30G partition 
(EXT4) directly after the main data parition, to allow easy resizing afterwards.

Format the UEFI partition to fat32, the data partition to anything (unformatted, 
if possible), and tmp install partition to ext4.

Create these partitions using normal methods in gparted, or another partitioning tool.

TODO: add more details here.

TODO: Reword this to be more clear

## Install ZFS Tmp Space

Setup ZFS with the following steps. As usual, replace with your disk id. You can also 
replace the hostname var, which will name the dataset the same as the system's hostname,
to make management more easy later.

Start by opening a *root* shell with `sudo su`, then run:

```
hostname="SET SYSTEM HOSTNAME HERE"
apt update
apt install -y zfsutils-linux
zpool create -f -o ashift=12 -O compression=lz4 -O xattr=sa -O mountpoint=none rootpool /dev/disk/by-id/ata-APPLE_SSD_SM0256G_S2Z5NY0J474795
zfs create -V 10G rootpool/tempdisk
zfs create -o mountpoint=none rootpool/ROOT
zfs create -o mountpoint=/ rootpool/ROOT/$hostname
zpool export rootpool
zpool import rootpool -R /mnt
zfs create rootpool/ROOT/$hostname/boot
zfs create rootpool/ROOT/$hostname/etc
zfs create rootpool/ROOT/$hostname/home
zfs create rootpool/ROOT/$hostname/tmp
zfs create rootpool/ROOT/$hostname/usr
zfs create rootpool/ROOT/$hostname/var
zpool set bootfs=rootpool/ROOT/$hostname rootpool
```


TODO: THis step may be wrong, used sd0 device

## Install Kubuntu

Now, install Kubuntu on the /dev/zd0 device (a loopback image file). Do not reboot after install.
The installer may crash during bootloader install. This is subpar but fine.

## Moving Installed System to ZFS Root

After install, copy the data from the tmp partition to the zfs pool

```
mkdir /media/temp &&
mount /dev/zd0p1 /media/temp &&
rsync -aAXvH /media/temp/* /mnt --exclude={/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found}

```

Next, setup the shell to switch running from the mnt dir, so that the ZFS initramfs and grub
can be installed into the copied system.
```
for i in /dev /dev/pts /proc /sys /run; do mount -B $i /mnt$i; done
chroot /mnt
apt install zfs-initramfs -y
grub-install /dev/disk/by-id/ata-APPLE_SSD_SM0256G_S2Z5NY0J474795
```

## Misc Cleanup
Remove any entries in /etc/fstab referencing the previous temporary root filesystem (ext4). Comment 
out those lines.

Add "boot=zfs" to /etc/default/grub in GRUB_CMDLINE_LINUX.

Next, run:
```
update-grub
exit
for i in /dev/pts /dev /proc /sys /run; do umount /mnt$i; done
umount /media/temp
```


## Remove Tmp Dataset

Finally, reemove the tmp dataset, snapshot the clean install, and export the pool.

Reboot.



## Alternate steps:

https://github.com/zfsonlinux/zfs/wiki/Ubuntu-18.04-Root-on-ZFS


### Install
sudo apt-add-repository universe -y
sudo apt install --yes debootstrap gdisk zfs-initramfs


### Clear Disk

sgdisk --zap-all /dev/disk/by-id/ata-APPLE_SSD_SM0256G_S2Z5NY0J474795



### Setup partitions (UEFI)
sgdisk     -n3:1M:+512M -t3:EF00 /dev/disk/by-id/ata-APPLE_SSD_SM0256G_S2Z5NY0J474795
sgdisk     -n1:0:0      -t1:BF01 /dev/disk/by-id/ata-APPLE_SSD_SM0256G_S2Z5NY0J474795


### Create Pool - NOT USED


zpool create -o ashift=12 \
      -O atime=off -O canmount=off -O compression=lz4 -O normalization=formD \
      -O xattr=sa -O mountpoint=/ -R /mnt \
      rpool /dev/disk/by-id/ata-APPLE_SSD_SM0256G_S2Z5NY0J474795


### Create Pool - Using


export hostname="by-mac"
sudo zpool create -f -o ashift=12 -O compression=lz4 -O xattr=sa -O mountpoint=none rootpool /dev/disk/by-id/ata-APPLE_SSD_SM0256G_S2Z5NY0J474795
sudo zfs create -V 10G rootpool/tempdisk
sudo zfs create -o mountpoint=none rootpool/ROOT
sudo zfs create -o mountpoint=/ rootpool/ROOT/$hostname
sudo zpool export rootpool
sudo zpool import rootpool -R /mnt
sudo zfs create rootpool/ROOT/$hostname/boot
sudo zfs create rootpool/ROOT/$hostname/etc
sudo zfs create rootpool/ROOT/$hostname/home
sudo zfs create rootpool/ROOT/$hostname/tmp
sudo zfs create rootpool/ROOT/$hostname/usr
sudo zfs create rootpool/ROOT/$hostname/var
sudo zpool set bootfs=rootpool/ROOT/$hostname rootpool

